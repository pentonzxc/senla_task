/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package senla;

import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpClient.Redirect;
import java.net.http.HttpClient.Version;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import senla.CrptApi.Document;
import senla.CrptApi.DocumentDescription;
import senla.CrptApi.Product;

public class App {
    public static String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(getGreeting());
    }

    public void test() {
        var gson = new GsonBuilder().registerTypeAdapter(CrptApi.Document.class, new CustomDeserializer())
                .registerTypeAdapter(CrptApi.Document.class, new CustomSerializer()).create();

        var gsonDefault = new Gson();
        var document = new CrptApi.Document(
                new DocumentDescription("description"),
                "documentId",
                "documentStatus",
                "documentType",
                true,
                "ownerInn",
                "participantInn",
                "producerInn",
                LocalDate.now(),
                "produtionType",
                List.of(new CrptApi.Product("certificateDocument", LocalDate.now(), "certificateDocumentNumber",
                        "ownerInn", "producerInn", LocalDate.now(), "tnvedCode", "uitCode", "uituCode")),
                LocalDate.now(),
                "registrationNumber");

        // try {
        var json = gson.toJson(document);
        System.out.println(json);
        var doc = gson.fromJson(json, Document.class);
    }

    public static class CustomSerializer implements JsonSerializer<CrptApi.Document> {

        @Override
        public JsonElement serialize(Document doc,
                Type typeOfSrc,
                JsonSerializationContext context) {
            JsonObject main = new JsonObject();
            JsonObject docDescription = new JsonObject();
            docDescription.addProperty("participantInn", doc.description().participantInn());
            JsonArray docProducts = new JsonArray();

            for (Product product : doc.products()) {
                JsonObject docProduct = new JsonObject();
                docProduct.addProperty("certificate_document", product.certificateDocument());
                docProduct.addProperty("certificate_document_date", product.certificateDocumentDate().toString());
                docProduct.addProperty("certificate_document_number", product.certificateDocumentNumber());
                docProduct.addProperty("owner_inn", product.ownerInn());
                docProduct.addProperty("producer_inn", product.producerInn());
                docProduct.addProperty("production_date", product.productionDate().toString());
                docProduct.addProperty("tnved_code", product.tnvedCode());
                docProduct.addProperty("uit_code", product.uitCode());
                docProduct.addProperty("uitu_code", product.uituCode());
                docProducts.add(docProduct);
            }

            main.add("description", docDescription);
            main.addProperty("doc_id", doc.documentId());
            main.addProperty("doc_status", doc.documentStatus());
            main.addProperty("doc_type", doc.documentType());
            main.addProperty("importRequest", doc.importRequest());
            main.addProperty("owner_inn", doc.ownerInn());
            main.addProperty("participant_inn", doc.participantInn());
            main.addProperty("producer_inn", doc.producerInn());
            main.addProperty("production_date", doc.productionDate().toString());
            main.addProperty("production_type", doc.productionType());
            main.add("products", docProducts);
            main.addProperty("reg_date", doc.registrationDate().toString());
            main.addProperty("reg_number", doc.registrationNumber());

            return main;
        }
    }

    public static class CustomDeserializer implements JsonDeserializer<CrptApi.Document> {

        @Override
        public Document deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
                throws JsonParseException {
            JsonObject main = json.getAsJsonObject();

            JsonObject descriptionJson = main.get("description").getAsJsonObject();
            DocumentDescription documentDescription = new DocumentDescription(
                    descriptionJson.get("participantInn").getAsString());
            String documentId = main.get("doc_id").getAsString();
            String documentStatus = main.get("doc_status").getAsString();
            String documentType = main.get("doc_type").getAsString();
            boolean importRequest = main.get("importRequest").getAsBoolean();
            String ownerInn = main.get("owner_inn").getAsString();
            String participantInn = main.get("participant_inn").getAsString();
            String producerInn = main.get("producer_inn").getAsString();
            LocalDate productionDate = LocalDate.parse(
                    main.get("production_date").getAsString());
            String productionType = main.get("production_type").getAsString();
            JsonArray jsonProducts = main.get("products").getAsJsonArray();
            List<Product> products = new ArrayList<>();
            for (JsonElement el : jsonProducts) {
                JsonObject jsonProduct = el.getAsJsonObject();
                String certificateDocument = jsonProduct.get("certificate_document").getAsString();
                LocalDate certificateDocumentDate = LocalDate.parse(
                        jsonProduct.get("certificate_document_date").getAsString());
                String certificateDocumentNumber = jsonProduct.get("certificate_document_number").getAsString();
                String ownerInn_ = jsonProduct.get("owner_inn").getAsString();
                String producerInn_ = jsonProduct.get("producer_inn").getAsString();
                LocalDate productionDate_ = LocalDate.parse(jsonProduct.get("production_date").getAsString());
                String tnvedCode = jsonProduct.get("tnved_code").getAsString();
                String uitCode = jsonProduct.get("tnved_code").getAsString();
                String uituCode = jsonProduct.get("uitu_code").getAsString();
                products.add(
                        new Product(
                                certificateDocument,
                                certificateDocumentDate,
                                certificateDocumentNumber,
                                ownerInn_,
                                producerInn_,
                                productionDate_,
                                tnvedCode,
                                uitCode,
                                uituCode));
            }

            LocalDate registrationDate = LocalDate.parse(main.get("reg_date").getAsString());
            String registrationNumber = main.get("reg_number").getAsString();

            return new Document(
                    documentDescription,
                    documentId,
                    documentStatus,
                    documentType,
                    importRequest,
                    ownerInn,
                    participantInn,
                    producerInn,
                    productionDate,
                    productionType,
                    products,
                    registrationDate,
                    registrationNumber);
        }
    }

}
